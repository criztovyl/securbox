#!/bin/bash
#	 This is a wrapper program for run and mount SecurStick on linux, from commandline.
#    Copyright (C) 2014 , 2015 Christoph "criztovyl" Schulz
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###Configuration Start###
#
##Set securbox home######
SBH=$HOME/.securbox
#
##Set mounting point#####
SB_MOUNT_POINT=/media/securbox
#
###Configuration End#####
#No editing below this line needed :)

#Make paths absolute
SBH=`realpath $SBH`
SB_MOUNT_POINT=`realpath $SB_MOUNT_POINT`

#Set output, respond and running files
SO=$SBH/output
RSP=$SBH/response
RNG=$SBH/.running

#Create folders and files if not exists
if [ ! -d $SBH ]; then
    mkdir -p $SBH
fi
if [ ! -d $SB_MOUNT_POINT ]; then
    mkdir -p $SB_MOUNT_POINT
fi
if [ ! -f $SO ]; then
    touch $SO
fi
if [ ! -f $RSP ]; then
    touch $RSP
fi

#Commands
CURL="curl -s"

#Functions

# get link from securbox output
# args: linkvar
function getlink(){ 
    local _linkvar=$1
    local _linkvalue=`awk "{if (FNR == 5){print}}" $SO` # grep link from output file (line 5)
    _linkvalue=${_linkvalue/# /} # remove first white space
    eval $_linkvar="'$_linkvalue'"
}

#unblock, need to get login page with image first to be allowed to post password
#args: link
function unblock(){
    $CURL $1 > /dev/null # get login page
    $CURL ${1/login/2.png} > /dev/null # get image
}

#start securbox
#no args
function startSO(){
    
    #Get SecurStick PID and check if isn't dead
    if [ -f $RNG ]; then
        _rngid=`cat $RNG` # get PID
        if [ `ps --pid $_rngid -o pid --no-header | wc -l` == 0 ]; then
            # SecurStick is dead. Remove PID file.
            rm -f $RNG
            echo "SecurStick is dead. Starting new instance"
        fi
    fi

    # Check whether need to start SecurStick
    if [ -f $RNG ]; then # check if SecurStick is running already
            echo "SecurStick seems to run already, skipping start."
    elif [[ `ps aux | grep -x grep | grep "SecurStick-linux" | wc -l` > 1 ]]; then # check if an other SecurStick is running we don't get
        echo "There is already a running SecurStick instance."
    else # if not, start SecurStick
        cd $SBH # securbox dir
        ./SecurStick-linux -NoBrowser -NoMount > $SO & #start securbox
        echo "Waiting for SecurStick startup..."
        sleepSecs 3 "%t seconds remaining..." # sleep three seconds to let SecurStick start up
        echo "Continue..."
        cd - > /dev/null # change back (sending to /dev/null to prevent output of PWD)
        echo $! > $SBH/.running # send SecurStick PID to PID file
   fi
   getlink link # receive link
   checkCreate create # check whether SecurStick Safe Zone need to be created
   if [ $create == 0 ]; then # if yes, receive password (with repetition)
       echo "Please set a new password for your securbox with at least 5 letters, both UPPER and lower case, at least one digit and at least one special character (like !,?,#)."
        getpass pass1 "Enter password  : "
        getpass pass2 "Repeat password : "
        if [ "$pass1" == "$pass2" ]; then # if passwords are equal, send to SecurStick
            getlink _link
            _resp=`$CURL ${_link/login/create} --data "P1=$pass1" --data "P2=$pass2" --data "EFN=1"` # Send and receive response
            if [ "${_resp:19:29}" == "SecurStick - Password unsafe!" ]; then # Request user to retry if password is not safe
                echo "Unsafe password, please retry!"
            elif [ "${_resp:19:32}" == "SecurStick - Safe Zone logged in" ]; then # Mount if successfully created Safe Zone
                echo "Logged in :)"
                mount $SB_MOUNT_POINT # mount securbox
                echo "Mounted."
            else
                echo "Invalid response."
            fi
        else
            echo "Passwords doesn't match, please retry!"
        fi
    else
        getpass pass "Enter SecurBox password: " # receive pass
        if [ "$pass" == "1" ]; then
            echo "Pressed cancel..."
        else
            unblock $link # unblock
             unlock success "$pass" $link #unlock
            #mount only if unlocking was successfull
            if [ $success == 0 ]; then
                echo "Logged in:)"
                mount $SB_MOUNT_POINT # mount securbox
                echo "Mounted."
            else
                echo "Can't unlock, maybe wrong password?"
            fi
        fi
    fi
}

#kill all SecurStick instances
#no args
function killSO(){
    rm -f $SBH/.running
    killall -w SecurStick-linux
}

#get password from user
#args: passvar prompt
#  passvar: name for variable the password should be stored in
#  promt: the promt text
function getpass(){
    local _passvar=$1
    local _p=$2
    case $SBPASSASK in
        "zenity")
            _PASS=`zenity --forms --title "securbox" --text "Unlock securbox" --add-password "$_p"`
            ;;
        *|"readline")
            read -sp "$_p" _PASS # get pass
            echo
            ;;
    esac
    eval $_passvar="'$_PASS'"
}

#unlock box
#args: status password link
function unlock(){
    _statusvar=$1
    _pass=$2
    _link=$3
    $CURL --data-urlencode "P=$_pass" "$_link""2" -o $RSP # send pass
    status=`cat $RSP`
    if [ "${status:32:19}" = "Safe Zone logged in" ]; then
        eval $_statusvar=0
    else
        eval $_statusvar=1
    fi
}

#stop box
#no args
function stopSO(){
    getlink _link
    umount $SB_MOUNT_POINT # unmount securbox
    $CURL ${_link/login/"stop"} > /dev/null # stop securbox
    rm -f $RSP $SBH/.running
}
#check if need to create Safe Zone
#args: status
function checkCreate(){
    _statusvar=$1
    getlink _link
    _page=`$CURL $_link`
    if [ "${_page:32:16}" == "Create Safe Zone" ];then
        eval $_statusvar=0
    else
        eval $_statusvar=1
    fi
}
#sleeps some seconds and print status
#can set message (msg), use %t to use remaining seconds
#args: seconds msg
function sleepSecs(){
#Receive message
_msg=$2
#Loop
for (( _secs=$1; $_secs; $((_secs--)) )); do
    #Check if message is set
    if [[ "$_msg" ]]; then
        #Replace %n with current seconds and echo
        echo ${_msg//"%t"/$_secs}
    fi
    #Sleep one second
    sleep 1
done
}
#Run
case $1 in
    "kill")
        killSO
        ;;
    "start")
        startSO
        ;;
    "stop")
        stopSO
        ;;
    *|"help")
        echo "Usage: [start|stop|kill|help]"
        echo "start: starts your SecurBox and mount it; will ask for passphrase"
        echo "stop: unmounts your SecurBox"
        echo "kill: kill all instances of SecurStick"
        echo "help: display this."
        echo "ENVIRONMENT:"
        echo "If \$SBPASSASK is set to 'zenity', a zenity gui will be used to ask for passphrase. Otherwise bash \`read\` will be used. (Needs zenity to be installed)"
esac

